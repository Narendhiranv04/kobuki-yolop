// Generated by gencpp from file hybrid_simulation/SetSpeed.msg
// DO NOT EDIT!


#ifndef HYBRID_SIMULATION_MESSAGE_SETSPEED_H
#define HYBRID_SIMULATION_MESSAGE_SETSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hybrid_simulation
{
template <class ContainerAllocator>
struct SetSpeed_
{
  typedef SetSpeed_<ContainerAllocator> Type;

  SetSpeed_()
    : desired_speed(0.0)  {
    }
  SetSpeed_(const ContainerAllocator& _alloc)
    : desired_speed(0.0)  {
  (void)_alloc;
    }



   typedef float _desired_speed_type;
  _desired_speed_type desired_speed;





  typedef boost::shared_ptr< ::hybrid_simulation::SetSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_simulation::SetSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct SetSpeed_

typedef ::hybrid_simulation::SetSpeed_<std::allocator<void> > SetSpeed;

typedef boost::shared_ptr< ::hybrid_simulation::SetSpeed > SetSpeedPtr;
typedef boost::shared_ptr< ::hybrid_simulation::SetSpeed const> SetSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_simulation::SetSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_simulation::SetSpeed_<ContainerAllocator1> & lhs, const ::hybrid_simulation::SetSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.desired_speed == rhs.desired_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_simulation::SetSpeed_<ContainerAllocator1> & lhs, const ::hybrid_simulation::SetSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_simulation::SetSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_simulation::SetSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_simulation::SetSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d5008c9d834e2c102355282755ead21";
  }

  static const char* value(const ::hybrid_simulation::SetSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d5008c9d834e2c1ULL;
  static const uint64_t static_value2 = 0x02355282755ead21ULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_simulation/SetSpeed";
  }

  static const char* value(const ::hybrid_simulation::SetSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message to control high level actions of the Ego-Vehicle\n"
"\n"
"\n"
"# desired_speed : Desired speed of the vehicle\n"
"\n"
"float32 desired_speed\n"
"\n"
"\n"
;
  }

  static const char* value(const ::hybrid_simulation::SetSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_simulation::SetSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_simulation::SetSpeed_<ContainerAllocator>& v)
  {
    s << indent << "desired_speed: ";
    Printer<float>::stream(s, indent + "  ", v.desired_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_SIMULATION_MESSAGE_SETSPEED_H
