// Generated by gencpp from file hybrid_simulation/VehicleStatusArray.msg
// DO NOT EDIT!


#ifndef HYBRID_SIMULATION_MESSAGE_VEHICLESTATUSARRAY_H
#define HYBRID_SIMULATION_MESSAGE_VEHICLESTATUSARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hybrid_simulation/VehicleStatus.h>

namespace hybrid_simulation
{
template <class ContainerAllocator>
struct VehicleStatusArray_
{
  typedef VehicleStatusArray_<ContainerAllocator> Type;

  VehicleStatusArray_()
    : header()
    , VehiclesDetected()  {
    }
  VehicleStatusArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , VehiclesDetected(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hybrid_simulation::VehicleStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hybrid_simulation::VehicleStatus_<ContainerAllocator> >> _VehiclesDetected_type;
  _VehiclesDetected_type VehiclesDetected;





  typedef boost::shared_ptr< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStatusArray_

typedef ::hybrid_simulation::VehicleStatusArray_<std::allocator<void> > VehicleStatusArray;

typedef boost::shared_ptr< ::hybrid_simulation::VehicleStatusArray > VehicleStatusArrayPtr;
typedef boost::shared_ptr< ::hybrid_simulation::VehicleStatusArray const> VehicleStatusArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator1> & lhs, const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.VehiclesDetected == rhs.VehiclesDetected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator1> & lhs, const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hybrid_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "919422845bd2de82c89aae1314b50aa7";
  }

  static const char* value(const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x919422845bd2de82ULL;
  static const uint64_t static_value2 = 0xc89aae1314b50aa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hybrid_simulation/VehicleStatusArray";
  }

  static const char* value(const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array variable message of VehicleStatus\n"
"Header header\n"
"VehicleStatus[] VehiclesDetected\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hybrid_simulation/VehicleStatus\n"
"# Message to send information about Vehicles in the scene\n"
"\n"
"# id : The idenfification of the vehicle\n"
"# pos_x : Vehicle x position\n"
"# pos_y : Vehicle y position\n"
"# heading : Vehicle heading (Yaw angle)\n"
"# velocity : Linear velocity of the vehicle\n"
"# max_vel : Maximum velocity\n"
"\n"
"string  vehicle_id\n"
"float32 pos_x\n"
"float32 pos_y\n"
"float32 heading\n"
"float32 velocity\n"
"float32 max_vel\n"
"int16 lane\n"
"int16 signals\n"
"\n"
;
  }

  static const char* value(const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.VehiclesDetected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStatusArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hybrid_simulation::VehicleStatusArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "VehiclesDetected[]" << std::endl;
    for (size_t i = 0; i < v.VehiclesDetected.size(); ++i)
    {
      s << indent << "  VehiclesDetected[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hybrid_simulation::VehicleStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.VehiclesDetected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HYBRID_SIMULATION_MESSAGE_VEHICLESTATUSARRAY_H
